
task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000380  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000380  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000098b  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000022a  00000000  00000000  00010d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5f  00000000  00000000  00011020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a4e  00000000  00000000  0001ed7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb04  00000000  00000000  0001f7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f2d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0006f324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000360 	.word	0x08000360

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000360 	.word	0x08000360

080001d4 <main>:
#include "stm32f401cc_interface.h"

/* RGB LED controller is consisted of 1 push button and 1 RGB LED. */

int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0

	int i;  // initialize iterate variable for delay
	int sum = 0b1; // initialize binary number for the 8 colors mix
 80001da:	2301      	movs	r3, #1
 80001dc:	603b      	str	r3, [r7, #0]

	RCC_AHB1ENR |= (1<<1);  // enable clock of GPIOB
 80001de:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <main+0xc0>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	4a2c      	ldr	r2, [pc, #176]	; (8000294 <main+0xc0>)
 80001e4:	f043 0302 	orr.w	r3, r3, #2
 80001e8:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB_MODER &= ~((1<<6) | (1<<7));  // set PB3 as input (00) for push button
 80001ea:	4b2b      	ldr	r3, [pc, #172]	; (8000298 <main+0xc4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <main+0xc4>)
 80001f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f4:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= ((1<<10) | (1<<12) | (1<<14));  // set PB5, PB6, PB7 as output RGB LEDs
 80001f6:	4b28      	ldr	r3, [pc, #160]	; (8000298 <main+0xc4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a27      	ldr	r2, [pc, #156]	; (8000298 <main+0xc4>)
 80001fc:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000200:	6013      	str	r3, [r2, #0]

	GPIOB_OTYPER &= ~((1<<5) | (1<<6) | (1<<7)); // set PB5, PB6, PB7 as output push-pull
 8000202:	4b25      	ldr	r3, [pc, #148]	; (8000298 <main+0xc4>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	4a24      	ldr	r2, [pc, #144]	; (8000298 <main+0xc4>)
 8000208:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800020c:	6053      	str	r3, [r2, #4]
	GPIOB_PUPDR |= (1<<6);   // set PB3 as input pull-up
 800020e:	4b22      	ldr	r3, [pc, #136]	; (8000298 <main+0xc4>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4a21      	ldr	r2, [pc, #132]	; (8000298 <main+0xc4>)
 8000214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000218:	60d3      	str	r3, [r2, #12]

  while (1) {
	  // simulate all 8 cases for RGB colors with a binary number from 0 to 7
	  // which will be incremented by one on each press, we get the remainder of 8
	  // to not exceed 3 bits for 8 cases RGB colors mix.
	  sum = sum % 8;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	425a      	negs	r2, r3
 800021e:	f003 0307 	and.w	r3, r3, #7
 8000222:	f002 0207 	and.w	r2, r2, #7
 8000226:	bf58      	it	pl
 8000228:	4253      	negpl	r3, r2
 800022a:	603b      	str	r3, [r7, #0]

	  if(!(GPIOB_IDR & (1<<3))) // if the pin is low (Button pressed)
 800022c:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <main+0xc4>)
 800022e:	691b      	ldr	r3, [r3, #16]
 8000230:	f003 0308 	and.w	r3, r3, #8
 8000234:	2b00      	cmp	r3, #0
 8000236:	d122      	bne.n	800027e <main+0xaa>
	  {
		  /* set the three bits (sum in binary) to our three LEDs */
		  GPIOB_ODR |= (111<<5);  // first set bins "PB5, PB6, PB7" to 1 by ORing with 111
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <main+0xc4>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <main+0xc4>)
 800023e:	f443 635e 	orr.w	r3, r3, #3552	; 0xde0
 8000242:	6153      	str	r3, [r2, #20]
		  GPIOB_ODR &= (sum<<5);  // then ANDing them with sum binary to set the 3 bits equal to the current number of the sum
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <main+0xc4>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	683a      	ldr	r2, [r7, #0]
 800024a:	0152      	lsls	r2, r2, #5
 800024c:	4611      	mov	r1, r2
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <main+0xc4>)
 8000250:	400b      	ands	r3, r1
 8000252:	6153      	str	r3, [r2, #20]

		  while(!(GPIOB_IDR & (1<<3))); // wait until button is released
 8000254:	bf00      	nop
 8000256:	4b10      	ldr	r3, [pc, #64]	; (8000298 <main+0xc4>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	f003 0308 	and.w	r3, r3, #8
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f9      	beq.n	8000256 <main+0x82>

		  for(i = 0; i < 100000; i++){} // delay
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e002      	b.n	800026e <main+0x9a>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3301      	adds	r3, #1
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <main+0xc8>)
 8000272:	4293      	cmp	r3, r2
 8000274:	ddf8      	ble.n	8000268 <main+0x94>
		  sum++; // increment the binary number of sum for the second case of colors mix
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	e7cd      	b.n	800021a <main+0x46>
	  }
	  else {
		  for(i = 0; i < 100000; i++){} // delay
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e002      	b.n	800028a <main+0xb6>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a03      	ldr	r2, [pc, #12]	; (800029c <main+0xc8>)
 800028e:	4293      	cmp	r3, r2
 8000290:	ddf8      	ble.n	8000284 <main+0xb0>
	  sum = sum % 8;
 8000292:	e7c2      	b.n	800021a <main+0x46>
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	0001869f 	.word	0x0001869f

080002a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x20>)
 80002a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <SystemInit+0x20>)
 80002ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002ca:	490e      	ldr	r1, [pc, #56]	; (8000304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002cc:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002e0:	4c0b      	ldr	r4, [pc, #44]	; (8000310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002ee:	f7ff ffd7 	bl	80002a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002f6:	f7ff ff6d 	bl	80001d4 <main>
  bx  lr    
 80002fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	4d0d      	ldr	r5, [pc, #52]	; (8000350 <__libc_init_array+0x38>)
 800031c:	4c0d      	ldr	r4, [pc, #52]	; (8000354 <__libc_init_array+0x3c>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	2600      	movs	r6, #0
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	4d0b      	ldr	r5, [pc, #44]	; (8000358 <__libc_init_array+0x40>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	; (800035c <__libc_init_array+0x44>)
 800032c:	f000 f818 	bl	8000360 <_init>
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	2600      	movs	r6, #0
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
