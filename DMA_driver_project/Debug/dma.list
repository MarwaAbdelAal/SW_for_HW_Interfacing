
dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000838  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009cc  080009cc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009cc  080009cc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080009cc  080009cc  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009cc  080009cc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009cc  080009cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009d0  080009d0  000109d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080009d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200000a4  08000a78  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08000a78  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001544  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c4  00000000  00000000  00021618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00021ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000012ce  00000000  00000000  00022118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c18  00000000  00000000  000233e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e58e  00000000  00000000  00024ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a358c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000710  00000000  00000000  000a35e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000a4 	.word	0x200000a4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080009b4 	.word	0x080009b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a8 	.word	0x200000a8
 80001d0:	080009b4 	.word	0x080009b4

080001d4 <DMA_Init>:
// lookUp table for accessing the DMA registers
unsigned int* DMA_registers[2][10] = {{DMA2_LISR, DMA2_HISR, DMA2_LIFCR, DMA2_HIFCR, DMA2_S0CR, DMA2_S0NDTR,
                                     DMA2_S0PAR, DMA2_S0M0AR, DMA2_S0M1AR, DMA2_S0FCR}, 
                                    {DMA1_LISR, DMA1_HISR, DMA1_LIFCR, DMA1_HIFCR, DMA1_S0CR, DMA1_S0NDTR, DMA1_S0PAR, DMA1_S0M0AR, DMA1_S0M1AR, DMA1_S0FCR}};

void DMA_Init(unsigned char PID){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
    switch(PID){
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <DMA_Init+0x16>
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d043      	beq.n	8000270 <DMA_Init+0x9c>
        case 1:
            GPIO_EnableClock(DMA1); // Enable DMA1 CLK in RCC_AHB1ENR register
            (*NVIC_ISER0) = 1 << 11; // the position of DMA1_Stream 0 is 11
            break;
    }
}
 80001e8:	e04a      	b.n	8000280 <DMA_Init+0xac>
            GPIO_EnableClock(DMA2); // Enable DMA2 CLK in RCC_AHB1ENR register
 80001ea:	2016      	movs	r0, #22
 80001ec:	f000 f9c2 	bl	8000574 <GPIO_EnableClock>
            *DMA_registers[PID][S0CR] &= ~(1 << 0); // clear the ENABLE stream flag
 80001f0:	79fa      	ldrb	r2, [r7, #7]
 80001f2:	4925      	ldr	r1, [pc, #148]	; (8000288 <DMA_Init+0xb4>)
 80001f4:	4613      	mov	r3, r2
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	4413      	add	r3, r2
 80001fa:	00db      	lsls	r3, r3, #3
 80001fc:	440b      	add	r3, r1
 80001fe:	3310      	adds	r3, #16
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	79fa      	ldrb	r2, [r7, #7]
 8000206:	4820      	ldr	r0, [pc, #128]	; (8000288 <DMA_Init+0xb4>)
 8000208:	4613      	mov	r3, r2
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	4413      	add	r3, r2
 800020e:	00db      	lsls	r3, r3, #3
 8000210:	4403      	add	r3, r0
 8000212:	3310      	adds	r3, #16
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f021 0201 	bic.w	r2, r1, #1
 800021a:	601a      	str	r2, [r3, #0]
            while(((*DMA_registers[PID][S0CR]) & 1) == 1){} // wait until the DMA2 stream 0 is disabled
 800021c:	bf00      	nop
 800021e:	79fa      	ldrb	r2, [r7, #7]
 8000220:	4919      	ldr	r1, [pc, #100]	; (8000288 <DMA_Init+0xb4>)
 8000222:	4613      	mov	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	4413      	add	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	440b      	add	r3, r1
 800022c:	3310      	adds	r3, #16
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f1      	bne.n	800021e <DMA_Init+0x4a>
            (*NVIC_ISER1) = 1 << 24; // the position of DMA2_Stream 0 is 56 (in NVIC_ISER: 56 - 32 = 24)
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <DMA_Init+0xb8>)
 800023c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000240:	601a      	str	r2, [r3, #0]
            (*DMA_registers[PID][S0CR]) |= 1 << 4; // enable transfer complete interrupt
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	4910      	ldr	r1, [pc, #64]	; (8000288 <DMA_Init+0xb4>)
 8000246:	4613      	mov	r3, r2
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4413      	add	r3, r2
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	440b      	add	r3, r1
 8000250:	3310      	adds	r3, #16
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6819      	ldr	r1, [r3, #0]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	480b      	ldr	r0, [pc, #44]	; (8000288 <DMA_Init+0xb4>)
 800025a:	4613      	mov	r3, r2
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	4413      	add	r3, r2
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	4403      	add	r3, r0
 8000264:	3310      	adds	r3, #16
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f041 0210 	orr.w	r2, r1, #16
 800026c:	601a      	str	r2, [r3, #0]
            break;
 800026e:	e007      	b.n	8000280 <DMA_Init+0xac>
            GPIO_EnableClock(DMA1); // Enable DMA1 CLK in RCC_AHB1ENR register
 8000270:	2015      	movs	r0, #21
 8000272:	f000 f97f 	bl	8000574 <GPIO_EnableClock>
            (*NVIC_ISER0) = 1 << 11; // the position of DMA1_Stream 0 is 11
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <DMA_Init+0xbc>)
 8000278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800027c:	601a      	str	r2, [r3, #0]
            break;
 800027e:	bf00      	nop
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000000 	.word	0x20000000
 800028c:	e000e104 	.word	0xe000e104
 8000290:	e000e100 	.word	0xe000e100

08000294 <DMA_Parameters>:

void DMA_Parameters(unsigned char PID, unsigned int trigger, unsigned int *src_arr, unsigned int *dst_arr, unsigned int n_items, unsigned int item_size, unsigned int transfer_mode, unsigned int transfer_type){
 8000294:	b490      	push	{r4, r7}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
 800029e:	603b      	str	r3, [r7, #0]
 80002a0:	4603      	mov	r3, r0
 80002a2:	73fb      	strb	r3, [r7, #15]

    *DMA_registers[PID][S0CR] &= ~(0x03 << 6); // clear the data transfer direction first
 80002a4:	7bfa      	ldrb	r2, [r7, #15]
 80002a6:	497a      	ldr	r1, [pc, #488]	; (8000490 <DMA_Parameters+0x1fc>)
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	440b      	add	r3, r1
 80002b2:	3310      	adds	r3, #16
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	6819      	ldr	r1, [r3, #0]
 80002b8:	7bfa      	ldrb	r2, [r7, #15]
 80002ba:	4875      	ldr	r0, [pc, #468]	; (8000490 <DMA_Parameters+0x1fc>)
 80002bc:	4613      	mov	r3, r2
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	4413      	add	r3, r2
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	4403      	add	r3, r0
 80002c6:	3310      	adds	r3, #16
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f021 02c0 	bic.w	r2, r1, #192	; 0xc0
 80002ce:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (transfer_mode << 6); // select the direction
 80002d0:	7bfa      	ldrb	r2, [r7, #15]
 80002d2:	496f      	ldr	r1, [pc, #444]	; (8000490 <DMA_Parameters+0x1fc>)
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	00db      	lsls	r3, r3, #3
 80002dc:	440b      	add	r3, r1
 80002de:	3310      	adds	r3, #16
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	6a3b      	ldr	r3, [r7, #32]
 80002e6:	0199      	lsls	r1, r3, #6
 80002e8:	7bfa      	ldrb	r2, [r7, #15]
 80002ea:	4c69      	ldr	r4, [pc, #420]	; (8000490 <DMA_Parameters+0x1fc>)
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	4423      	add	r3, r4
 80002f6:	3310      	adds	r3, #16
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	ea40 0201 	orr.w	r2, r0, r1
 80002fe:	601a      	str	r2, [r3, #0]
    
    *DMA_registers[PID][S0CR] |= (0x01 << 9); // select Peripheral increment mode (PINC)
 8000300:	7bfa      	ldrb	r2, [r7, #15]
 8000302:	4963      	ldr	r1, [pc, #396]	; (8000490 <DMA_Parameters+0x1fc>)
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	440b      	add	r3, r1
 800030e:	3310      	adds	r3, #16
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6819      	ldr	r1, [r3, #0]
 8000314:	7bfa      	ldrb	r2, [r7, #15]
 8000316:	485e      	ldr	r0, [pc, #376]	; (8000490 <DMA_Parameters+0x1fc>)
 8000318:	4613      	mov	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	4403      	add	r3, r0
 8000322:	3310      	adds	r3, #16
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 800032a:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (0x01 << 10); // select Memory increment mode (MINC)
 800032c:	7bfa      	ldrb	r2, [r7, #15]
 800032e:	4958      	ldr	r1, [pc, #352]	; (8000490 <DMA_Parameters+0x1fc>)
 8000330:	4613      	mov	r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	4413      	add	r3, r2
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	440b      	add	r3, r1
 800033a:	3310      	adds	r3, #16
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6819      	ldr	r1, [r3, #0]
 8000340:	7bfa      	ldrb	r2, [r7, #15]
 8000342:	4853      	ldr	r0, [pc, #332]	; (8000490 <DMA_Parameters+0x1fc>)
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	4403      	add	r3, r0
 800034e:	3310      	adds	r3, #16
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8000356:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0CR] |= (item_size << 11); // select Peripheral data size (PSIZE) to word
 8000358:	7bfa      	ldrb	r2, [r7, #15]
 800035a:	494d      	ldr	r1, [pc, #308]	; (8000490 <DMA_Parameters+0x1fc>)
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	440b      	add	r3, r1
 8000366:	3310      	adds	r3, #16
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6818      	ldr	r0, [r3, #0]
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	02d9      	lsls	r1, r3, #11
 8000370:	7bfa      	ldrb	r2, [r7, #15]
 8000372:	4c47      	ldr	r4, [pc, #284]	; (8000490 <DMA_Parameters+0x1fc>)
 8000374:	4613      	mov	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4423      	add	r3, r4
 800037e:	3310      	adds	r3, #16
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	ea40 0201 	orr.w	r2, r0, r1
 8000386:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (item_size << 13); // select Memory data size (MSIZE) to word
 8000388:	7bfa      	ldrb	r2, [r7, #15]
 800038a:	4941      	ldr	r1, [pc, #260]	; (8000490 <DMA_Parameters+0x1fc>)
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	440b      	add	r3, r1
 8000396:	3310      	adds	r3, #16
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6818      	ldr	r0, [r3, #0]
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	0359      	lsls	r1, r3, #13
 80003a0:	7bfa      	ldrb	r2, [r7, #15]
 80003a2:	4c3b      	ldr	r4, [pc, #236]	; (8000490 <DMA_Parameters+0x1fc>)
 80003a4:	4613      	mov	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	4413      	add	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	4423      	add	r3, r4
 80003ae:	3310      	adds	r3, #16
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	ea40 0201 	orr.w	r2, r0, r1
 80003b6:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0CR] |= (0x03 << 16); // select stream Priority level very high
 80003b8:	7bfa      	ldrb	r2, [r7, #15]
 80003ba:	4935      	ldr	r1, [pc, #212]	; (8000490 <DMA_Parameters+0x1fc>)
 80003bc:	4613      	mov	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	440b      	add	r3, r1
 80003c6:	3310      	adds	r3, #16
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	7bfa      	ldrb	r2, [r7, #15]
 80003ce:	4830      	ldr	r0, [pc, #192]	; (8000490 <DMA_Parameters+0x1fc>)
 80003d0:	4613      	mov	r3, r2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4413      	add	r3, r2
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	4403      	add	r3, r0
 80003da:	3310      	adds	r3, #16
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f441 3240 	orr.w	r2, r1, #196608	; 0x30000
 80003e2:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0CR] &= ~(transfer_type << 21); // select Peripheral burst transfer configuration to single transfer
 80003e4:	7bfa      	ldrb	r2, [r7, #15]
 80003e6:	492a      	ldr	r1, [pc, #168]	; (8000490 <DMA_Parameters+0x1fc>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	440b      	add	r3, r1
 80003f2:	3310      	adds	r3, #16
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fa:	055b      	lsls	r3, r3, #21
 80003fc:	43d9      	mvns	r1, r3
 80003fe:	7bfa      	ldrb	r2, [r7, #15]
 8000400:	4c23      	ldr	r4, [pc, #140]	; (8000490 <DMA_Parameters+0x1fc>)
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	4423      	add	r3, r4
 800040c:	3310      	adds	r3, #16
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	ea00 0201 	and.w	r2, r0, r1
 8000414:	601a      	str	r2, [r3, #0]
    
    *DMA_registers[PID][S0NDTR] = n_items; // Number of data items to transfer = 100
 8000416:	7bfa      	ldrb	r2, [r7, #15]
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <DMA_Parameters+0x1fc>)
 800041a:	4613      	mov	r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	4413      	add	r3, r2
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	440b      	add	r3, r1
 8000424:	3314      	adds	r3, #20
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	69ba      	ldr	r2, [r7, #24]
 800042a:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0PAR] = (unsigned int) src_arr; // DMA2_stream 0 peripheral address register
 800042c:	7bfa      	ldrb	r2, [r7, #15]
 800042e:	4918      	ldr	r1, [pc, #96]	; (8000490 <DMA_Parameters+0x1fc>)
 8000430:	4613      	mov	r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	4413      	add	r3, r2
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	440b      	add	r3, r1
 800043a:	3318      	adds	r3, #24
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0M0AR] = (unsigned int) dst_arr; // DMA2_stream 0 memory 0 address register
 8000442:	7bfa      	ldrb	r2, [r7, #15]
 8000444:	4912      	ldr	r1, [pc, #72]	; (8000490 <DMA_Parameters+0x1fc>)
 8000446:	4613      	mov	r3, r2
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4413      	add	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	440b      	add	r3, r1
 8000450:	331c      	adds	r3, #28
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0FCR] |= (0x01 << 0); // FIFO threshold selection to 1/2 full FIFO
 8000458:	7bfa      	ldrb	r2, [r7, #15]
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <DMA_Parameters+0x1fc>)
 800045c:	4613      	mov	r3, r2
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	4413      	add	r3, r2
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	440b      	add	r3, r1
 8000466:	3324      	adds	r3, #36	; 0x24
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	6819      	ldr	r1, [r3, #0]
 800046c:	7bfa      	ldrb	r2, [r7, #15]
 800046e:	4808      	ldr	r0, [pc, #32]	; (8000490 <DMA_Parameters+0x1fc>)
 8000470:	4613      	mov	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	4413      	add	r3, r2
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	4403      	add	r3, r0
 800047a:	3324      	adds	r3, #36	; 0x24
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f041 0201 	orr.w	r2, r1, #1
 8000482:	601a      	str	r2, [r3, #0]
}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bc90      	pop	{r4, r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000000 	.word	0x20000000

08000494 <DMA2_stream0_enable>:

void DMA2_stream0_enable(unsigned char PID){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	// CLEAR ALL INTERRUPT FLAGS of DMA2_Stream 0
	*DMA_registers[PID][LIFCR] |= (0x01 << 0);
 800049e:	79fa      	ldrb	r2, [r7, #7]
 80004a0:	4923      	ldr	r1, [pc, #140]	; (8000530 <DMA2_stream0_enable+0x9c>)
 80004a2:	4613      	mov	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	00db      	lsls	r3, r3, #3
 80004aa:	440b      	add	r3, r1
 80004ac:	3308      	adds	r3, #8
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6819      	ldr	r1, [r3, #0]
 80004b2:	79fa      	ldrb	r2, [r7, #7]
 80004b4:	481e      	ldr	r0, [pc, #120]	; (8000530 <DMA2_stream0_enable+0x9c>)
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	4403      	add	r3, r0
 80004c0:	3308      	adds	r3, #8
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f041 0201 	orr.w	r2, r1, #1
 80004c8:	601a      	str	r2, [r3, #0]
	*DMA_registers[PID][LIFCR] |= (0x0F << 2);
 80004ca:	79fa      	ldrb	r2, [r7, #7]
 80004cc:	4918      	ldr	r1, [pc, #96]	; (8000530 <DMA2_stream0_enable+0x9c>)
 80004ce:	4613      	mov	r3, r2
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	440b      	add	r3, r1
 80004d8:	3308      	adds	r3, #8
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	79fa      	ldrb	r2, [r7, #7]
 80004e0:	4813      	ldr	r0, [pc, #76]	; (8000530 <DMA2_stream0_enable+0x9c>)
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4403      	add	r3, r0
 80004ec:	3308      	adds	r3, #8
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f041 023c 	orr.w	r2, r1, #60	; 0x3c
 80004f4:	601a      	str	r2, [r3, #0]

	*DMA_registers[PID][S0CR] |= (0x01 << 0); // ENABLE DMA2_Stream 0
 80004f6:	79fa      	ldrb	r2, [r7, #7]
 80004f8:	490d      	ldr	r1, [pc, #52]	; (8000530 <DMA2_stream0_enable+0x9c>)
 80004fa:	4613      	mov	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	440b      	add	r3, r1
 8000504:	3310      	adds	r3, #16
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	79fa      	ldrb	r2, [r7, #7]
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <DMA2_stream0_enable+0x9c>)
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	4403      	add	r3, r0
 8000518:	3310      	adds	r3, #16
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f041 0201 	orr.w	r2, r1, #1
 8000520:	601a      	str	r2, [r3, #0]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000000 	.word	0x20000000

08000534 <DMA2_Stream0_IRQHandler>:
unsigned int DMA_CompleteTransfer(unsigned char PID){
    unsigned int flag = ((*DMA_registers[PID][LISR] & (1 << 5)) >> 5); // Read the flag data
    return flag;
}

void DMA2_Stream0_IRQHandler (void){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
    TurnOn_LED();
 8000538:	f000 f994 	bl	8000864 <TurnOn_LED>
	*DMA_registers[0][LIFCR] |= 1 << 5; // clear the transfer complete interrupt flag after finishing
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <DMA2_Stream0_IRQHandler+0x1c>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b03      	ldr	r3, [pc, #12]	; (8000550 <DMA2_Stream0_IRQHandler+0x1c>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f042 0220 	orr.w	r2, r2, #32
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000

08000554 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler (void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    TurnOn_LED();
 8000558:	f000 f984 	bl	8000864 <TurnOn_LED>
	*DMA_registers[1][LIFCR] |= 1 << 5; // clear the transfer complete interrupt flag after finishing
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <DMA1_Stream0_IRQHandler+0x1c>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b03      	ldr	r3, [pc, #12]	; (8000570 <DMA1_Stream0_IRQHandler+0x1c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f042 0220 	orr.w	r2, r2, #32
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000000 	.word	0x20000000

08000574 <GPIO_EnableClock>:

// lookUp table for accessing the GPIO registers
unsigned int* GPIO_registers[2][10] = {{GPIOA_MODER, GPIOA_OTYPER, GPIOA_OSPEEDR, GPIOA_PUPDR, GPIOA_IDR, GPIOA_ODR, GPIOA_BSRR, GPIOA_LCKR, GPIOA_AFRL, GPIOA_AFRH},
                              {GPIOB_MODER, GPIOB_OTYPER, GPIOB_OSPEEDR, GPIOB_PUPDR, GPIOB_IDR, GPIOB_ODR, GPIOB_BSRR, GPIOB_LCKR, GPIOB_AFRL, GPIOB_AFRH}};

void GPIO_EnableClock(unsigned char PORT_ID) {
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  *RCC_AHB1ENR |= (0x01 << PORT_ID);
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <GPIO_EnableClock+0x2c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <GPIO_EnableClock+0x2c>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40023830 	.word	0x40023830

080005a4 <GPIO_Init>:

void GPIO_Init(unsigned char PORT_ID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 80005a4:	b490      	push	{r4, r7}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4604      	mov	r4, r0
 80005ac:	4608      	mov	r0, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	461a      	mov	r2, r3
 80005b2:	4623      	mov	r3, r4
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	4603      	mov	r3, r0
 80005b8:	71bb      	strb	r3, [r7, #6]
 80005ba:	460b      	mov	r3, r1
 80005bc:	717b      	strb	r3, [r7, #5]
 80005be:	4613      	mov	r3, r2
 80005c0:	713b      	strb	r3, [r7, #4]
      // Configure moder register for pin direction
      // MODER index in GPIO_registers table is 0
      *GPIO_registers[PORT_ID][MODER] &= ~(0x03 << 2 * PinNum);
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	4956      	ldr	r1, [pc, #344]	; (8000720 <GPIO_Init+0x17c>)
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	440b      	add	r3, r1
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	2203      	movs	r2, #3
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	461c      	mov	r4, r3
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	484e      	ldr	r0, [pc, #312]	; (8000720 <GPIO_Init+0x17c>)
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	4403      	add	r3, r0
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	ea01 0204 	and.w	r2, r1, r4
 80005f6:	601a      	str	r2, [r3, #0]
      *GPIO_registers[PORT_ID][MODER] |= PinMode << 2 * PinNum;
 80005f8:	79fa      	ldrb	r2, [r7, #7]
 80005fa:	4949      	ldr	r1, [pc, #292]	; (8000720 <GPIO_Init+0x17c>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	440b      	add	r3, r1
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	6819      	ldr	r1, [r3, #0]
 800060a:	797a      	ldrb	r2, [r7, #5]
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	461c      	mov	r4, r3
 8000616:	79fa      	ldrb	r2, [r7, #7]
 8000618:	4841      	ldr	r0, [pc, #260]	; (8000720 <GPIO_Init+0x17c>)
 800061a:	4613      	mov	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	4403      	add	r3, r0
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	ea41 0204 	orr.w	r2, r1, r4
 800062a:	601a      	str	r2, [r3, #0]

      // OTYPER index in GPIO_registers table is 1
      *GPIO_registers[PORT_ID][OTYPER] &= ~(1 << PinNum);
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	493c      	ldr	r1, [pc, #240]	; (8000720 <GPIO_Init+0x17c>)
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	440b      	add	r3, r1
 800063a:	3304      	adds	r3, #4
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6819      	ldr	r1, [r3, #0]
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2201      	movs	r2, #1
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	461c      	mov	r4, r3
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	4834      	ldr	r0, [pc, #208]	; (8000720 <GPIO_Init+0x17c>)
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4403      	add	r3, r0
 800065a:	3304      	adds	r3, #4
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	ea01 0204 	and.w	r2, r1, r4
 8000662:	601a      	str	r2, [r3, #0]
      *GPIO_registers[PORT_ID][OTYPER] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 8000664:	79fa      	ldrb	r2, [r7, #7]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <GPIO_Init+0x17c>)
 8000668:	4613      	mov	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	440b      	add	r3, r1
 8000672:	3304      	adds	r3, #4
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6819      	ldr	r1, [r3, #0]
 8000678:	793b      	ldrb	r3, [r7, #4]
 800067a:	f003 0201 	and.w	r2, r3, #1
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	461c      	mov	r4, r3
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	4825      	ldr	r0, [pc, #148]	; (8000720 <GPIO_Init+0x17c>)
 800068a:	4613      	mov	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4403      	add	r3, r0
 8000694:	3304      	adds	r3, #4
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	ea41 0204 	orr.w	r2, r1, r4
 800069c:	601a      	str	r2, [r3, #0]

      // PUPDR index in GPIO_registers table is 3
      *GPIO_registers[PORT_ID][PUPDR] &= ~(0x03 << 2 * PinNum);
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <GPIO_Init+0x17c>)
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	440b      	add	r3, r1
 80006ac:	330c      	adds	r3, #12
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2203      	movs	r2, #3
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	461c      	mov	r4, r3
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <GPIO_Init+0x17c>)
 80006c4:	4613      	mov	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4403      	add	r3, r0
 80006ce:	330c      	adds	r3, #12
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	ea01 0204 	and.w	r2, r1, r4
 80006d6:	601a      	str	r2, [r3, #0]
      *GPIO_registers[PORT_ID][PUPDR] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	4911      	ldr	r1, [pc, #68]	; (8000720 <GPIO_Init+0x17c>)
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	440b      	add	r3, r1
 80006e6:	330c      	adds	r3, #12
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	793b      	ldrb	r3, [r7, #4]
 80006ee:	105b      	asrs	r3, r3, #1
 80006f0:	f003 0203 	and.w	r2, r3, #3
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	461c      	mov	r4, r3
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <GPIO_Init+0x17c>)
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	4403      	add	r3, r0
 800070c:	330c      	adds	r3, #12
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	ea41 0204 	orr.w	r2, r1, r4
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bc90      	pop	{r4, r7}
 800071e:	4770      	bx	lr
 8000720:	20000050 	.word	0x20000050

08000724 <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PORT_ID, unsigned char PinNum, unsigned char Data) {
 8000724:	b490      	push	{r4, r7}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	460b      	mov	r3, r1
 8000730:	71bb      	strb	r3, [r7, #6]
 8000732:	4613      	mov	r3, r2
 8000734:	717b      	strb	r3, [r7, #5]
  unsigned char result;
      if (((*GPIO_registers[PORT_ID][MODER] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	492c      	ldr	r1, [pc, #176]	; (80007ec <GPIO_WritePin+0xc8>)
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	79ba      	ldrb	r2, [r7, #6]
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	2103      	movs	r1, #3
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	401a      	ands	r2, r3
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	fa22 f303 	lsr.w	r3, r2, r3
 800075c:	2b01      	cmp	r3, #1
 800075e:	d13d      	bne.n	80007dc <GPIO_WritePin+0xb8>
        if (Data) {
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d01b      	beq.n	800079e <GPIO_WritePin+0x7a>
          // ODR index in GPIO_registers table is 5
          *GPIO_registers[PORT_ID][ODR] |= (1 << PinNum);
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	4920      	ldr	r1, [pc, #128]	; (80007ec <GPIO_WritePin+0xc8>)
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3314      	adds	r3, #20
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2201      	movs	r2, #1
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	461c      	mov	r4, r3
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <GPIO_WritePin+0xc8>)
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4403      	add	r3, r0
 8000792:	3314      	adds	r3, #20
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	ea41 0204 	orr.w	r2, r1, r4
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	e01b      	b.n	80007d6 <GPIO_WritePin+0xb2>
        } else {
          *GPIO_registers[PORT_ID][ODR] &= ~(1 << PinNum);
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	4912      	ldr	r1, [pc, #72]	; (80007ec <GPIO_WritePin+0xc8>)
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	440b      	add	r3, r1
 80007ac:	3314      	adds	r3, #20
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	2201      	movs	r2, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	461c      	mov	r4, r3
 80007be:	79fa      	ldrb	r2, [r7, #7]
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <GPIO_WritePin+0xc8>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4403      	add	r3, r0
 80007cc:	3314      	adds	r3, #20
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	ea01 0204 	and.w	r2, r1, r4
 80007d4:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e001      	b.n	80007e0 <GPIO_WritePin+0xbc>
      } else {
        result = NOK;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
      }
  return result;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc90      	pop	{r4, r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000050 	.word	0x20000050

080007f0 <main>:
unsigned int src_arr[buffer_size];
unsigned int dst_arr[buffer_size] = {};

void TurnOn_LED();

int main(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af04      	add	r7, sp, #16

	GPIO_EnableClock(PORTA); // Enable CLK of PORTA
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff febc 	bl	8000574 <GPIO_EnableClock>

    GPIO_Init(PORTA, 0, OUTPUT, PUSH_PULL); // initialize PA0 as an output LED
 80007fc:	2300      	movs	r3, #0
 80007fe:	2201      	movs	r2, #1
 8000800:	2100      	movs	r1, #0
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fece 	bl	80005a4 <GPIO_Init>

    DMA_Init(0);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff fce3 	bl	80001d4 <DMA_Init>
    DMA_Parameters(0, 0, src_arr, dst_arr, buffer_size, WORD, MEMORY_TO_MEMORY, 0x03);
 800080e:	2303      	movs	r3, #3
 8000810:	9303      	str	r3, [sp, #12]
 8000812:	2302      	movs	r3, #2
 8000814:	9302      	str	r3, [sp, #8]
 8000816:	2302      	movs	r3, #2
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <main+0x6c>)
 8000820:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <main+0x70>)
 8000822:	2100      	movs	r1, #0
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fd35 	bl	8000294 <DMA_Parameters>

    // initialize source array with numbers of 100,200,....
    unsigned int i = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
    for(i = 0; i < buffer_size; i++){
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e00b      	b.n	800084c <main+0x5c>
        src_arr[i] = (i + 1) * buffer_size;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3301      	adds	r3, #1
 8000838:	2264      	movs	r2, #100	; 0x64
 800083a:	fb02 f203 	mul.w	r2, r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <main+0x70>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(i = 0; i < buffer_size; i++){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3301      	adds	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b63      	cmp	r3, #99	; 0x63
 8000850:	d9f0      	bls.n	8000834 <main+0x44>
    }

    DMA2_stream0_enable(0);
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff fe1e 	bl	8000494 <DMA2_stream0_enable>

    while (1){}
 8000858:	e7fe      	b.n	8000858 <main+0x68>
 800085a:	bf00      	nop
 800085c:	200000c0 	.word	0x200000c0
 8000860:	20000250 	.word	0x20000250

08000864 <TurnOn_LED>:

    return 0;
}

void TurnOn_LED(){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    GPIO_WritePin(PORTA, 0, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff59 	bl	8000724 <GPIO_WritePin>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}

08000876 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087a:	e7fe      	b.n	800087a <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <HardFault_Handler+0x4>

08000882 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <MemManage_Handler+0x4>

08000888 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <BusFault_Handler+0x4>

0800088e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f83f 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008f6:	490e      	ldr	r1, [pc, #56]	; (8000930 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800090c:	4c0b      	ldr	r4, [pc, #44]	; (800093c <LoopFillZerobss+0x26>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800091a:	f7ff ffd7 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f000 f825 	bl	800096c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff ff65 	bl	80007f0 <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000928:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000934:	080009d4 	.word	0x080009d4
  ldr r2, =_sbss
 8000938:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800093c:	200003e4 	.word	0x200003e4

08000940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x20>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_IncTick+0x24>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200000a0 	.word	0x200000a0
 8000968:	200003e0 	.word	0x200003e0

0800096c <__libc_init_array>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	4d0d      	ldr	r5, [pc, #52]	; (80009a4 <__libc_init_array+0x38>)
 8000970:	4c0d      	ldr	r4, [pc, #52]	; (80009a8 <__libc_init_array+0x3c>)
 8000972:	1b64      	subs	r4, r4, r5
 8000974:	10a4      	asrs	r4, r4, #2
 8000976:	2600      	movs	r6, #0
 8000978:	42a6      	cmp	r6, r4
 800097a:	d109      	bne.n	8000990 <__libc_init_array+0x24>
 800097c:	4d0b      	ldr	r5, [pc, #44]	; (80009ac <__libc_init_array+0x40>)
 800097e:	4c0c      	ldr	r4, [pc, #48]	; (80009b0 <__libc_init_array+0x44>)
 8000980:	f000 f818 	bl	80009b4 <_init>
 8000984:	1b64      	subs	r4, r4, r5
 8000986:	10a4      	asrs	r4, r4, #2
 8000988:	2600      	movs	r6, #0
 800098a:	42a6      	cmp	r6, r4
 800098c:	d105      	bne.n	800099a <__libc_init_array+0x2e>
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f855 3b04 	ldr.w	r3, [r5], #4
 8000994:	4798      	blx	r3
 8000996:	3601      	adds	r6, #1
 8000998:	e7ee      	b.n	8000978 <__libc_init_array+0xc>
 800099a:	f855 3b04 	ldr.w	r3, [r5], #4
 800099e:	4798      	blx	r3
 80009a0:	3601      	adds	r6, #1
 80009a2:	e7f2      	b.n	800098a <__libc_init_array+0x1e>
 80009a4:	080009cc 	.word	0x080009cc
 80009a8:	080009cc 	.word	0x080009cc
 80009ac:	080009cc 	.word	0x080009cc
 80009b0:	080009d0 	.word	0x080009d0

080009b4 <_init>:
 80009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b6:	bf00      	nop
 80009b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ba:	bc08      	pop	{r3}
 80009bc:	469e      	mov	lr, r3
 80009be:	4770      	bx	lr

080009c0 <_fini>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr
