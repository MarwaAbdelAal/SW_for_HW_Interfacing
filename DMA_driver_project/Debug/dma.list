
dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000954  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ae8  08000ae8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ae8  08000ae8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae8  08000ae8  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae8  08000ae8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aec  08000aec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08000af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200000a4  08000b94  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08000b94  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001547  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000695  00000000  00000000  0002161b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00021cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  00021ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000132e  00000000  00000000  000220d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ca4  00000000  00000000  00023406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e7da  00000000  00000000  000250aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a3884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e8  00000000  00000000  000a38d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000a4 	.word	0x200000a4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ad0 	.word	0x08000ad0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a8 	.word	0x200000a8
 80001d0:	08000ad0 	.word	0x08000ad0

080001d4 <DMA_Init>:
unsigned int* DMA_registers[2][10] = {{DMA2_LISR, DMA2_HISR, DMA2_LIFCR, DMA2_HIFCR, DMA2_S0CR, DMA2_S0NDTR,
                                     DMA2_S0PAR, DMA2_S0M0AR, DMA2_S0M1AR, DMA2_S0FCR}, 
                                    {DMA1_LISR, DMA1_HISR, DMA1_LIFCR, DMA1_HIFCR, DMA1_S0CR, DMA1_S0NDTR,
                                    DMA1_S0PAR, DMA1_S0M0AR, DMA1_S0M1AR, DMA1_S0FCR}};

void DMA_Init(unsigned char PID){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

    switch(PID){
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <DMA_Init+0x16>
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d008      	beq.n	80001fa <DMA_Init+0x26>
 80001e8:	e00f      	b.n	800020a <DMA_Init+0x36>
        case 0:
            GPIO_EnableClock(DMA2); // Enable DMA2 CLK in RCC_AHB1ENR register
 80001ea:	2016      	movs	r0, #22
 80001ec:	f000 fa44 	bl	8000678 <GPIO_EnableClock>
            (*NVIC_ISER1) = 1 << 24; // the position of DMA2_Stream 0 is 56 (in NVIC_ISER: 56 - 32 = 24)
 80001f0:	4b25      	ldr	r3, [pc, #148]	; (8000288 <DMA_Init+0xb4>)
 80001f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80001f6:	601a      	str	r2, [r3, #0]
            break;
 80001f8:	e007      	b.n	800020a <DMA_Init+0x36>

        case 1:
            GPIO_EnableClock(DMA1); // Enable DMA1 CLK in RCC_AHB1ENR register
 80001fa:	2015      	movs	r0, #21
 80001fc:	f000 fa3c 	bl	8000678 <GPIO_EnableClock>
            (*NVIC_ISER0) = 1 << 11; // the position of DMA1_Stream 0 is 11
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <DMA_Init+0xb8>)
 8000202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000206:	601a      	str	r2, [r3, #0]
            break;
 8000208:	bf00      	nop
    }

    /* Make sure that the DMA stream 0 is disabled */
    *DMA_registers[PID][S0CR] &= ~(1 << 0); // clear the ENABLE stream 0 flag
 800020a:	79fa      	ldrb	r2, [r7, #7]
 800020c:	4920      	ldr	r1, [pc, #128]	; (8000290 <DMA_Init+0xbc>)
 800020e:	4613      	mov	r3, r2
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	4413      	add	r3, r2
 8000214:	00db      	lsls	r3, r3, #3
 8000216:	440b      	add	r3, r1
 8000218:	3310      	adds	r3, #16
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	6819      	ldr	r1, [r3, #0]
 800021e:	79fa      	ldrb	r2, [r7, #7]
 8000220:	481b      	ldr	r0, [pc, #108]	; (8000290 <DMA_Init+0xbc>)
 8000222:	4613      	mov	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	4413      	add	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	4403      	add	r3, r0
 800022c:	3310      	adds	r3, #16
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f021 0201 	bic.w	r2, r1, #1
 8000234:	601a      	str	r2, [r3, #0]
    while(((*DMA_registers[PID][S0CR]) & 1) == 1){} // wait until the DMA stream 0 is disabled
 8000236:	bf00      	nop
 8000238:	79fa      	ldrb	r2, [r7, #7]
 800023a:	4915      	ldr	r1, [pc, #84]	; (8000290 <DMA_Init+0xbc>)
 800023c:	4613      	mov	r3, r2
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	4413      	add	r3, r2
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	440b      	add	r3, r1
 8000246:	3310      	adds	r3, #16
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d1f1      	bne.n	8000238 <DMA_Init+0x64>
    
    (*DMA_registers[PID][S0CR]) |= 1 << 4; // ENABLE DMA Transfer complete interrupt (TCIE)
 8000254:	79fa      	ldrb	r2, [r7, #7]
 8000256:	490e      	ldr	r1, [pc, #56]	; (8000290 <DMA_Init+0xbc>)
 8000258:	4613      	mov	r3, r2
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	4413      	add	r3, r2
 800025e:	00db      	lsls	r3, r3, #3
 8000260:	440b      	add	r3, r1
 8000262:	3310      	adds	r3, #16
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6819      	ldr	r1, [r3, #0]
 8000268:	79fa      	ldrb	r2, [r7, #7]
 800026a:	4809      	ldr	r0, [pc, #36]	; (8000290 <DMA_Init+0xbc>)
 800026c:	4613      	mov	r3, r2
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4413      	add	r3, r2
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	4403      	add	r3, r0
 8000276:	3310      	adds	r3, #16
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f041 0210 	orr.w	r2, r1, #16
 800027e:	601a      	str	r2, [r3, #0]
    
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	e000e104 	.word	0xe000e104
 800028c:	e000e100 	.word	0xe000e100
 8000290:	20000000 	.word	0x20000000

08000294 <DMA_Parameters>:

void DMA_Parameters(unsigned char PID, unsigned char trigger, unsigned int *src_arr, unsigned int *dest_arr, unsigned int data_items,
		unsigned char item_size, unsigned char transfer_mode, unsigned char transfer_type, unsigned char priority_level,
		unsigned char PINC_mode, unsigned char MINC_mode, unsigned char fifo_threshold){
 8000294:	b490      	push	{r4, r7}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	60ba      	str	r2, [r7, #8]
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	4603      	mov	r3, r0
 80002a0:	73fb      	strb	r3, [r7, #15]
 80002a2:	460b      	mov	r3, r1
 80002a4:	73bb      	strb	r3, [r7, #14]

    *DMA_registers[PID][S0CR] &= ~(0x03 << 6); // clear the data transfer direction first
 80002a6:	7bfa      	ldrb	r2, [r7, #15]
 80002a8:	49ba      	ldr	r1, [pc, #744]	; (8000594 <DMA_Parameters+0x300>)
 80002aa:	4613      	mov	r3, r2
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	4413      	add	r3, r2
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	440b      	add	r3, r1
 80002b4:	3310      	adds	r3, #16
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	6819      	ldr	r1, [r3, #0]
 80002ba:	7bfa      	ldrb	r2, [r7, #15]
 80002bc:	48b5      	ldr	r0, [pc, #724]	; (8000594 <DMA_Parameters+0x300>)
 80002be:	4613      	mov	r3, r2
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	4413      	add	r3, r2
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	4403      	add	r3, r0
 80002c8:	3310      	adds	r3, #16
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f021 02c0 	bic.w	r2, r1, #192	; 0xc0
 80002d0:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (transfer_mode << 6); // select the direction (memory to memory)
 80002d2:	7bfa      	ldrb	r2, [r7, #15]
 80002d4:	49af      	ldr	r1, [pc, #700]	; (8000594 <DMA_Parameters+0x300>)
 80002d6:	4613      	mov	r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4413      	add	r3, r2
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	440b      	add	r3, r1
 80002e0:	3310      	adds	r3, #16
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	6819      	ldr	r1, [r3, #0]
 80002e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80002ea:	019b      	lsls	r3, r3, #6
 80002ec:	461c      	mov	r4, r3
 80002ee:	7bfa      	ldrb	r2, [r7, #15]
 80002f0:	48a8      	ldr	r0, [pc, #672]	; (8000594 <DMA_Parameters+0x300>)
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	4403      	add	r3, r0
 80002fc:	3310      	adds	r3, #16
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	ea41 0204 	orr.w	r2, r1, r4
 8000304:	601a      	str	r2, [r3, #0]
    
    *DMA_registers[PID][S0CR] &= ~(0x03 << 9); // clear Peripheral and Memory increment bits first
 8000306:	7bfa      	ldrb	r2, [r7, #15]
 8000308:	49a2      	ldr	r1, [pc, #648]	; (8000594 <DMA_Parameters+0x300>)
 800030a:	4613      	mov	r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	440b      	add	r3, r1
 8000314:	3310      	adds	r3, #16
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	6819      	ldr	r1, [r3, #0]
 800031a:	7bfa      	ldrb	r2, [r7, #15]
 800031c:	489d      	ldr	r0, [pc, #628]	; (8000594 <DMA_Parameters+0x300>)
 800031e:	4613      	mov	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4413      	add	r3, r2
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	4403      	add	r3, r0
 8000328:	3310      	adds	r3, #16
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f421 62c0 	bic.w	r2, r1, #1536	; 0x600
 8000330:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (PINC_mode << 9); // select Peripheral increment mode (PINC)
 8000332:	7bfa      	ldrb	r2, [r7, #15]
 8000334:	4997      	ldr	r1, [pc, #604]	; (8000594 <DMA_Parameters+0x300>)
 8000336:	4613      	mov	r3, r2
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	440b      	add	r3, r1
 8000340:	3310      	adds	r3, #16
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6819      	ldr	r1, [r3, #0]
 8000346:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800034a:	025b      	lsls	r3, r3, #9
 800034c:	461c      	mov	r4, r3
 800034e:	7bfa      	ldrb	r2, [r7, #15]
 8000350:	4890      	ldr	r0, [pc, #576]	; (8000594 <DMA_Parameters+0x300>)
 8000352:	4613      	mov	r3, r2
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	4413      	add	r3, r2
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	4403      	add	r3, r0
 800035c:	3310      	adds	r3, #16
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	ea41 0204 	orr.w	r2, r1, r4
 8000364:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (MINC_mode << 10); // select Memory increment mode (MINC)
 8000366:	7bfa      	ldrb	r2, [r7, #15]
 8000368:	498a      	ldr	r1, [pc, #552]	; (8000594 <DMA_Parameters+0x300>)
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	00db      	lsls	r3, r3, #3
 8000372:	440b      	add	r3, r1
 8000374:	3310      	adds	r3, #16
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	6819      	ldr	r1, [r3, #0]
 800037a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800037e:	029b      	lsls	r3, r3, #10
 8000380:	461c      	mov	r4, r3
 8000382:	7bfa      	ldrb	r2, [r7, #15]
 8000384:	4883      	ldr	r0, [pc, #524]	; (8000594 <DMA_Parameters+0x300>)
 8000386:	4613      	mov	r3, r2
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	4403      	add	r3, r0
 8000390:	3310      	adds	r3, #16
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	ea41 0204 	orr.w	r2, r1, r4
 8000398:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0CR] &= ~(0x0F << 11); // clear Peripheral and Memory data size bits first
 800039a:	7bfa      	ldrb	r2, [r7, #15]
 800039c:	497d      	ldr	r1, [pc, #500]	; (8000594 <DMA_Parameters+0x300>)
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	00db      	lsls	r3, r3, #3
 80003a6:	440b      	add	r3, r1
 80003a8:	3310      	adds	r3, #16
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	6819      	ldr	r1, [r3, #0]
 80003ae:	7bfa      	ldrb	r2, [r7, #15]
 80003b0:	4878      	ldr	r0, [pc, #480]	; (8000594 <DMA_Parameters+0x300>)
 80003b2:	4613      	mov	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	4403      	add	r3, r0
 80003bc:	3310      	adds	r3, #16
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f421 42f0 	bic.w	r2, r1, #30720	; 0x7800
 80003c4:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (item_size << 11); // select Peripheral data size (PSIZE) to word
 80003c6:	7bfa      	ldrb	r2, [r7, #15]
 80003c8:	4972      	ldr	r1, [pc, #456]	; (8000594 <DMA_Parameters+0x300>)
 80003ca:	4613      	mov	r3, r2
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	4413      	add	r3, r2
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	440b      	add	r3, r1
 80003d4:	3310      	adds	r3, #16
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6819      	ldr	r1, [r3, #0]
 80003da:	7f3b      	ldrb	r3, [r7, #28]
 80003dc:	02db      	lsls	r3, r3, #11
 80003de:	461c      	mov	r4, r3
 80003e0:	7bfa      	ldrb	r2, [r7, #15]
 80003e2:	486c      	ldr	r0, [pc, #432]	; (8000594 <DMA_Parameters+0x300>)
 80003e4:	4613      	mov	r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	4413      	add	r3, r2
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	4403      	add	r3, r0
 80003ee:	3310      	adds	r3, #16
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	ea41 0204 	orr.w	r2, r1, r4
 80003f6:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (item_size << 13); // select Memory data size (MSIZE) to word
 80003f8:	7bfa      	ldrb	r2, [r7, #15]
 80003fa:	4966      	ldr	r1, [pc, #408]	; (8000594 <DMA_Parameters+0x300>)
 80003fc:	4613      	mov	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	440b      	add	r3, r1
 8000406:	3310      	adds	r3, #16
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	6819      	ldr	r1, [r3, #0]
 800040c:	7f3b      	ldrb	r3, [r7, #28]
 800040e:	035b      	lsls	r3, r3, #13
 8000410:	461c      	mov	r4, r3
 8000412:	7bfa      	ldrb	r2, [r7, #15]
 8000414:	485f      	ldr	r0, [pc, #380]	; (8000594 <DMA_Parameters+0x300>)
 8000416:	4613      	mov	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4413      	add	r3, r2
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	4403      	add	r3, r0
 8000420:	3310      	adds	r3, #16
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	ea41 0204 	orr.w	r2, r1, r4
 8000428:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0CR] &= ~(0x03 << 16); // clear stream Priority level first
 800042a:	7bfa      	ldrb	r2, [r7, #15]
 800042c:	4959      	ldr	r1, [pc, #356]	; (8000594 <DMA_Parameters+0x300>)
 800042e:	4613      	mov	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	440b      	add	r3, r1
 8000438:	3310      	adds	r3, #16
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	7bfa      	ldrb	r2, [r7, #15]
 8000440:	4854      	ldr	r0, [pc, #336]	; (8000594 <DMA_Parameters+0x300>)
 8000442:	4613      	mov	r3, r2
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4413      	add	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	4403      	add	r3, r0
 800044c:	3310      	adds	r3, #16
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f421 3240 	bic.w	r2, r1, #196608	; 0x30000
 8000454:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (priority_level << 16); // select PL
 8000456:	7bfa      	ldrb	r2, [r7, #15]
 8000458:	494e      	ldr	r1, [pc, #312]	; (8000594 <DMA_Parameters+0x300>)
 800045a:	4613      	mov	r3, r2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4413      	add	r3, r2
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	440b      	add	r3, r1
 8000464:	3310      	adds	r3, #16
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6819      	ldr	r1, [r3, #0]
 800046a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800046e:	041b      	lsls	r3, r3, #16
 8000470:	461c      	mov	r4, r3
 8000472:	7bfa      	ldrb	r2, [r7, #15]
 8000474:	4847      	ldr	r0, [pc, #284]	; (8000594 <DMA_Parameters+0x300>)
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	00db      	lsls	r3, r3, #3
 800047e:	4403      	add	r3, r0
 8000480:	3310      	adds	r3, #16
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	ea41 0204 	orr.w	r2, r1, r4
 8000488:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0CR] &= ~(0x03 << 21); // clear Peripheral burst transfer configuration first
 800048a:	7bfa      	ldrb	r2, [r7, #15]
 800048c:	4941      	ldr	r1, [pc, #260]	; (8000594 <DMA_Parameters+0x300>)
 800048e:	4613      	mov	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4413      	add	r3, r2
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	440b      	add	r3, r1
 8000498:	3310      	adds	r3, #16
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6819      	ldr	r1, [r3, #0]
 800049e:	7bfa      	ldrb	r2, [r7, #15]
 80004a0:	483c      	ldr	r0, [pc, #240]	; (8000594 <DMA_Parameters+0x300>)
 80004a2:	4613      	mov	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	00db      	lsls	r3, r3, #3
 80004aa:	4403      	add	r3, r0
 80004ac:	3310      	adds	r3, #16
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80004b4:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0CR] |= (transfer_type << 21); // select PBURST to single transfer
 80004b6:	7bfa      	ldrb	r2, [r7, #15]
 80004b8:	4936      	ldr	r1, [pc, #216]	; (8000594 <DMA_Parameters+0x300>)
 80004ba:	4613      	mov	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	00db      	lsls	r3, r3, #3
 80004c2:	440b      	add	r3, r1
 80004c4:	3310      	adds	r3, #16
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6819      	ldr	r1, [r3, #0]
 80004ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004ce:	055b      	lsls	r3, r3, #21
 80004d0:	461c      	mov	r4, r3
 80004d2:	7bfa      	ldrb	r2, [r7, #15]
 80004d4:	482f      	ldr	r0, [pc, #188]	; (8000594 <DMA_Parameters+0x300>)
 80004d6:	4613      	mov	r3, r2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	4403      	add	r3, r0
 80004e0:	3310      	adds	r3, #16
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	ea41 0204 	orr.w	r2, r1, r4
 80004e8:	601a      	str	r2, [r3, #0]
    
    *DMA_registers[PID][S0NDTR] = data_items; // Number of data items to transfer = 100
 80004ea:	7bfa      	ldrb	r2, [r7, #15]
 80004ec:	4929      	ldr	r1, [pc, #164]	; (8000594 <DMA_Parameters+0x300>)
 80004ee:	4613      	mov	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4413      	add	r3, r2
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	440b      	add	r3, r1
 80004f8:	3314      	adds	r3, #20
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0PAR] = (unsigned int) src_arr; // DMA2_stream 0 peripheral address register
 8000500:	7bfa      	ldrb	r2, [r7, #15]
 8000502:	4924      	ldr	r1, [pc, #144]	; (8000594 <DMA_Parameters+0x300>)
 8000504:	4613      	mov	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	440b      	add	r3, r1
 800050e:	3318      	adds	r3, #24
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0M0AR] = (unsigned int) dest_arr; // DMA2_stream 0 memory 0 address register
 8000516:	7bfa      	ldrb	r2, [r7, #15]
 8000518:	491e      	ldr	r1, [pc, #120]	; (8000594 <DMA_Parameters+0x300>)
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	440b      	add	r3, r1
 8000524:	331c      	adds	r3, #28
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	601a      	str	r2, [r3, #0]

    *DMA_registers[PID][S0FCR] &= ~(0x03 << 0); // clear FIFO threshold bits first
 800052c:	7bfa      	ldrb	r2, [r7, #15]
 800052e:	4919      	ldr	r1, [pc, #100]	; (8000594 <DMA_Parameters+0x300>)
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	440b      	add	r3, r1
 800053a:	3324      	adds	r3, #36	; 0x24
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6819      	ldr	r1, [r3, #0]
 8000540:	7bfa      	ldrb	r2, [r7, #15]
 8000542:	4814      	ldr	r0, [pc, #80]	; (8000594 <DMA_Parameters+0x300>)
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	00db      	lsls	r3, r3, #3
 800054c:	4403      	add	r3, r0
 800054e:	3324      	adds	r3, #36	; 0x24
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f021 0203 	bic.w	r2, r1, #3
 8000556:	601a      	str	r2, [r3, #0]
    *DMA_registers[PID][S0FCR] |= (fifo_threshold << 0); // FIFO threshold selection to 1/2 full FIFO in FIFO control register
 8000558:	7bfa      	ldrb	r2, [r7, #15]
 800055a:	490e      	ldr	r1, [pc, #56]	; (8000594 <DMA_Parameters+0x300>)
 800055c:	4613      	mov	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	4413      	add	r3, r2
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	440b      	add	r3, r1
 8000566:	3324      	adds	r3, #36	; 0x24
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6818      	ldr	r0, [r3, #0]
 800056c:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8000570:	7bfa      	ldrb	r2, [r7, #15]
 8000572:	4c08      	ldr	r4, [pc, #32]	; (8000594 <DMA_Parameters+0x300>)
 8000574:	4613      	mov	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4413      	add	r3, r2
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	4423      	add	r3, r4
 800057e:	3324      	adds	r3, #36	; 0x24
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	ea40 0201 	orr.w	r2, r0, r1
 8000586:	601a      	str	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bc90      	pop	{r4, r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000

08000598 <DMA_Start_transfer>:

/* start transfer */
void DMA_Start_transfer(unsigned char PID){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	// CLEAR ALL INTERRUPT FLAGS of DMA_Stream 0
	*DMA_registers[PID][LIFCR] |= (0x01 << 0);
 80005a2:	79fa      	ldrb	r2, [r7, #7]
 80005a4:	4923      	ldr	r1, [pc, #140]	; (8000634 <DMA_Start_transfer+0x9c>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	440b      	add	r3, r1
 80005b0:	3308      	adds	r3, #8
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6819      	ldr	r1, [r3, #0]
 80005b6:	79fa      	ldrb	r2, [r7, #7]
 80005b8:	481e      	ldr	r0, [pc, #120]	; (8000634 <DMA_Start_transfer+0x9c>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	4403      	add	r3, r0
 80005c4:	3308      	adds	r3, #8
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f041 0201 	orr.w	r2, r1, #1
 80005cc:	601a      	str	r2, [r3, #0]
	*DMA_registers[PID][LIFCR] |= (0x0F << 2);
 80005ce:	79fa      	ldrb	r2, [r7, #7]
 80005d0:	4918      	ldr	r1, [pc, #96]	; (8000634 <DMA_Start_transfer+0x9c>)
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	440b      	add	r3, r1
 80005dc:	3308      	adds	r3, #8
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6819      	ldr	r1, [r3, #0]
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	4813      	ldr	r0, [pc, #76]	; (8000634 <DMA_Start_transfer+0x9c>)
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	4403      	add	r3, r0
 80005f0:	3308      	adds	r3, #8
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f041 023c 	orr.w	r2, r1, #60	; 0x3c
 80005f8:	601a      	str	r2, [r3, #0]

	*DMA_registers[PID][S0CR] |= (0x01 << 0); // ENABLE DMA_Stream 0
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	490d      	ldr	r1, [pc, #52]	; (8000634 <DMA_Start_transfer+0x9c>)
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	440b      	add	r3, r1
 8000608:	3310      	adds	r3, #16
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	79fa      	ldrb	r2, [r7, #7]
 8000610:	4808      	ldr	r0, [pc, #32]	; (8000634 <DMA_Start_transfer+0x9c>)
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4403      	add	r3, r0
 800061c:	3310      	adds	r3, #16
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f041 0201 	orr.w	r2, r1, #1
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000

08000638 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler (void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    TC_CalloutNotification();
 800063c:	f000 f9a0 	bl	8000980 <TC_CalloutNotification>
	*DMA_registers[0][LIFCR] |= 1 << 5; // clear the transfer complete interrupt flag of DMA2 after finishing
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <DMA2_Stream0_IRQHandler+0x1c>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b03      	ldr	r3, [pc, #12]	; (8000654 <DMA2_Stream0_IRQHandler+0x1c>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	f042 0220 	orr.w	r2, r2, #32
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000

08000658 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler (void){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    TC_CalloutNotification();
 800065c:	f000 f990 	bl	8000980 <TC_CalloutNotification>
	*DMA_registers[1][LIFCR] |= 1 << 5; // clear the transfer complete interrupt flag of DMA1 after finishing
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <DMA1_Stream0_IRQHandler+0x1c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b03      	ldr	r3, [pc, #12]	; (8000674 <DMA1_Stream0_IRQHandler+0x1c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f042 0220 	orr.w	r2, r2, #32
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000000 	.word	0x20000000

08000678 <GPIO_EnableClock>:

// lookUp table for accessing the GPIO registers
unsigned int* GPIO_registers[2][10] = {{GPIOA_MODER, GPIOA_OTYPER, GPIOA_OSPEEDR, GPIOA_PUPDR, GPIOA_IDR, GPIOA_ODR, GPIOA_BSRR, GPIOA_LCKR, GPIOA_AFRL, GPIOA_AFRH},
                              {GPIOB_MODER, GPIOB_OTYPER, GPIOB_OSPEEDR, GPIOB_PUPDR, GPIOB_IDR, GPIOB_ODR, GPIOB_BSRR, GPIOB_LCKR, GPIOB_AFRL, GPIOB_AFRH}};

void GPIO_EnableClock(unsigned char PORT_ID) {
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  *RCC_AHB1ENR |= (0x01 << PORT_ID);
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <GPIO_EnableClock+0x2c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <GPIO_EnableClock+0x2c>)
 8000692:	430b      	orrs	r3, r1
 8000694:	6013      	str	r3, [r2, #0]
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023830 	.word	0x40023830

080006a8 <GPIO_Init>:

void GPIO_Init(unsigned char PORT_ID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 80006a8:	b490      	push	{r4, r7}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4604      	mov	r4, r0
 80006b0:	4608      	mov	r0, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	461a      	mov	r2, r3
 80006b6:	4623      	mov	r3, r4
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	4603      	mov	r3, r0
 80006bc:	71bb      	strb	r3, [r7, #6]
 80006be:	460b      	mov	r3, r1
 80006c0:	717b      	strb	r3, [r7, #5]
 80006c2:	4613      	mov	r3, r2
 80006c4:	713b      	strb	r3, [r7, #4]
      // Configure moder register for pin direction
      // MODER index in GPIO_registers table is 0
      *GPIO_registers[PORT_ID][MODER] &= ~(0x03 << 2 * PinNum);
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	4956      	ldr	r1, [pc, #344]	; (8000824 <GPIO_Init+0x17c>)
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	440b      	add	r3, r1
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6819      	ldr	r1, [r3, #0]
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	2203      	movs	r2, #3
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	461c      	mov	r4, r3
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	484e      	ldr	r0, [pc, #312]	; (8000824 <GPIO_Init+0x17c>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	4403      	add	r3, r0
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	ea01 0204 	and.w	r2, r1, r4
 80006fa:	601a      	str	r2, [r3, #0]
      *GPIO_registers[PORT_ID][MODER] |= PinMode << 2 * PinNum;
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	4949      	ldr	r1, [pc, #292]	; (8000824 <GPIO_Init+0x17c>)
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	440b      	add	r3, r1
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	797a      	ldrb	r2, [r7, #5]
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	461c      	mov	r4, r3
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	4841      	ldr	r0, [pc, #260]	; (8000824 <GPIO_Init+0x17c>)
 800071e:	4613      	mov	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	4403      	add	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	ea41 0204 	orr.w	r2, r1, r4
 800072e:	601a      	str	r2, [r3, #0]

      // OTYPER index in GPIO_registers table is 1
      *GPIO_registers[PORT_ID][OTYPER] &= ~(1 << PinNum);
 8000730:	79fa      	ldrb	r2, [r7, #7]
 8000732:	493c      	ldr	r1, [pc, #240]	; (8000824 <GPIO_Init+0x17c>)
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	440b      	add	r3, r1
 800073e:	3304      	adds	r3, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2201      	movs	r2, #1
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	461c      	mov	r4, r3
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	4834      	ldr	r0, [pc, #208]	; (8000824 <GPIO_Init+0x17c>)
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	4403      	add	r3, r0
 800075e:	3304      	adds	r3, #4
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	ea01 0204 	and.w	r2, r1, r4
 8000766:	601a      	str	r2, [r3, #0]
      *GPIO_registers[PORT_ID][OTYPER] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	492e      	ldr	r1, [pc, #184]	; (8000824 <GPIO_Init+0x17c>)
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3304      	adds	r3, #4
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	793b      	ldrb	r3, [r7, #4]
 800077e:	f003 0201 	and.w	r2, r3, #1
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	461c      	mov	r4, r3
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	4825      	ldr	r0, [pc, #148]	; (8000824 <GPIO_Init+0x17c>)
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4403      	add	r3, r0
 8000798:	3304      	adds	r3, #4
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	ea41 0204 	orr.w	r2, r1, r4
 80007a0:	601a      	str	r2, [r3, #0]

      // PUPDR index in GPIO_registers table is 3
      *GPIO_registers[PORT_ID][PUPDR] &= ~(0x03 << 2 * PinNum);
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	491f      	ldr	r1, [pc, #124]	; (8000824 <GPIO_Init+0x17c>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	440b      	add	r3, r1
 80007b0:	330c      	adds	r3, #12
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	2203      	movs	r2, #3
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	461c      	mov	r4, r3
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <GPIO_Init+0x17c>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4403      	add	r3, r0
 80007d2:	330c      	adds	r3, #12
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	ea01 0204 	and.w	r2, r1, r4
 80007da:	601a      	str	r2, [r3, #0]
      *GPIO_registers[PORT_ID][PUPDR] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	4911      	ldr	r1, [pc, #68]	; (8000824 <GPIO_Init+0x17c>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	330c      	adds	r3, #12
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	793b      	ldrb	r3, [r7, #4]
 80007f2:	105b      	asrs	r3, r3, #1
 80007f4:	f003 0203 	and.w	r2, r3, #3
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	461c      	mov	r4, r3
 8000802:	79fa      	ldrb	r2, [r7, #7]
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <GPIO_Init+0x17c>)
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	4403      	add	r3, r0
 8000810:	330c      	adds	r3, #12
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	ea41 0204 	orr.w	r2, r1, r4
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bc90      	pop	{r4, r7}
 8000822:	4770      	bx	lr
 8000824:	20000050 	.word	0x20000050

08000828 <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char PORT_ID, unsigned char PinNum, unsigned char Data) {
 8000828:	b490      	push	{r4, r7}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	460b      	mov	r3, r1
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	4613      	mov	r3, r2
 8000838:	717b      	strb	r3, [r7, #5]
  unsigned char result;
      if (((*GPIO_registers[PORT_ID][MODER] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	492c      	ldr	r1, [pc, #176]	; (80008f0 <GPIO_WritePin+0xc8>)
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	79ba      	ldrb	r2, [r7, #6]
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	2103      	movs	r1, #3
 8000852:	fa01 f202 	lsl.w	r2, r1, r2
 8000856:	401a      	ands	r2, r3
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa22 f303 	lsr.w	r3, r2, r3
 8000860:	2b01      	cmp	r3, #1
 8000862:	d13d      	bne.n	80008e0 <GPIO_WritePin+0xb8>
        if (Data) {
 8000864:	797b      	ldrb	r3, [r7, #5]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d01b      	beq.n	80008a2 <GPIO_WritePin+0x7a>
          // ODR index in GPIO_registers table is 5
          *GPIO_registers[PORT_ID][ODR] |= (1 << PinNum);
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	4920      	ldr	r1, [pc, #128]	; (80008f0 <GPIO_WritePin+0xc8>)
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	3314      	adds	r3, #20
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6819      	ldr	r1, [r3, #0]
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	2201      	movs	r2, #1
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	461c      	mov	r4, r3
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	4819      	ldr	r0, [pc, #100]	; (80008f0 <GPIO_WritePin+0xc8>)
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4403      	add	r3, r0
 8000896:	3314      	adds	r3, #20
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	ea41 0204 	orr.w	r2, r1, r4
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e01b      	b.n	80008da <GPIO_WritePin+0xb2>
        } else {
          *GPIO_registers[PORT_ID][ODR] &= ~(1 << PinNum);
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	4912      	ldr	r1, [pc, #72]	; (80008f0 <GPIO_WritePin+0xc8>)
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	440b      	add	r3, r1
 80008b0:	3314      	adds	r3, #20
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2201      	movs	r2, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	461c      	mov	r4, r3
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	480a      	ldr	r0, [pc, #40]	; (80008f0 <GPIO_WritePin+0xc8>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4403      	add	r3, r0
 80008d0:	3314      	adds	r3, #20
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	ea01 0204 	and.w	r2, r1, r4
 80008d8:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	e001      	b.n	80008e4 <GPIO_WritePin+0xbc>
      } else {
        result = NOK;
 80008e0:	2301      	movs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
      }
  return result;
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc90      	pop	{r4, r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000050 	.word	0x20000050

080008f4 <main>:
unsigned int src_arr[items_size];
unsigned int dest_arr[items_size];

void TC_CalloutNotification();

int main(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af08      	add	r7, sp, #32

    // initialize source array with numbers of 100,200,.... and destination array with zeros
    unsigned int i = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
    for(i = 0; i < items_size; i++){
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	e010      	b.n	8000926 <main+0x32>
        src_arr[i] = (i + 1) * items_size;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3301      	adds	r3, #1
 8000908:	2264      	movs	r2, #100	; 0x64
 800090a:	fb02 f203 	mul.w	r2, r2, r3
 800090e:	491a      	ldr	r1, [pc, #104]	; (8000978 <main+0x84>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        dest_arr[i] = 0;
 8000916:	4a19      	ldr	r2, [pc, #100]	; (800097c <main+0x88>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2100      	movs	r1, #0
 800091c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i = 0; i < items_size; i++){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b63      	cmp	r3, #99	; 0x63
 800092a:	d9eb      	bls.n	8000904 <main+0x10>
    }

    GPIO_EnableClock(PORTA); // Enable CLK of PORTA
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff fea3 	bl	8000678 <GPIO_EnableClock>

    GPIO_Init(PORTA, 0, OUTPUT, PUSH_PULL); // initialize PA0 as an output LED
 8000932:	2300      	movs	r3, #0
 8000934:	2201      	movs	r2, #1
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff feb5 	bl	80006a8 <GPIO_Init>

    /* initialize DMA2-Stream 0 with its Parameters */
    DMA_Init(0);
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff fc48 	bl	80001d4 <DMA_Init>
    DMA_Parameters(0, 0, src_arr, dest_arr, items_size, WORD, MEMORY_TO_MEMORY, SINGLE_TRANSFER, VERY_HIGH_PRIORITY,
 8000944:	2301      	movs	r3, #1
 8000946:	9307      	str	r3, [sp, #28]
 8000948:	2301      	movs	r3, #1
 800094a:	9306      	str	r3, [sp, #24]
 800094c:	2301      	movs	r3, #1
 800094e:	9305      	str	r3, [sp, #20]
 8000950:	2303      	movs	r3, #3
 8000952:	9304      	str	r3, [sp, #16]
 8000954:	2300      	movs	r3, #0
 8000956:	9303      	str	r3, [sp, #12]
 8000958:	2302      	movs	r3, #2
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2302      	movs	r3, #2
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <main+0x88>)
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <main+0x84>)
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fc92 	bl	8000294 <DMA_Parameters>
    		INCREMENT_PINC, INCREMENT_MINC, HALF_FIFO);

    DMA_Start_transfer(0); // Start transfer by enable DMA2_stream 0
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fe11 	bl	8000598 <DMA_Start_transfer>

    while (1);
 8000976:	e7fe      	b.n	8000976 <main+0x82>
 8000978:	20000250 	.word	0x20000250
 800097c:	200000c0 	.word	0x200000c0

08000980 <TC_CalloutNotification>:

    return 0;
}

void TC_CalloutNotification(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    GPIO_WritePin(PORTA, 0, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ff4d 	bl	8000828 <GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}

08000992 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <HardFault_Handler+0x4>

0800099e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <MemManage_Handler+0x4>

080009a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <BusFault_Handler+0x4>

080009aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f83f 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f000 f825 	bl	8000a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff ff59 	bl	80008f4 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000a50:	08000af0 	.word	0x08000af0
  ldr r2, =_sbss
 8000a54:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000a58:	200003e4 	.word	0x200003e4

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000a0 	.word	0x200000a0
 8000a84:	200003e0 	.word	0x200003e0

08000a88 <__libc_init_array>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4d0d      	ldr	r5, [pc, #52]	; (8000ac0 <__libc_init_array+0x38>)
 8000a8c:	4c0d      	ldr	r4, [pc, #52]	; (8000ac4 <__libc_init_array+0x3c>)
 8000a8e:	1b64      	subs	r4, r4, r5
 8000a90:	10a4      	asrs	r4, r4, #2
 8000a92:	2600      	movs	r6, #0
 8000a94:	42a6      	cmp	r6, r4
 8000a96:	d109      	bne.n	8000aac <__libc_init_array+0x24>
 8000a98:	4d0b      	ldr	r5, [pc, #44]	; (8000ac8 <__libc_init_array+0x40>)
 8000a9a:	4c0c      	ldr	r4, [pc, #48]	; (8000acc <__libc_init_array+0x44>)
 8000a9c:	f000 f818 	bl	8000ad0 <_init>
 8000aa0:	1b64      	subs	r4, r4, r5
 8000aa2:	10a4      	asrs	r4, r4, #2
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	42a6      	cmp	r6, r4
 8000aa8:	d105      	bne.n	8000ab6 <__libc_init_array+0x2e>
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab0:	4798      	blx	r3
 8000ab2:	3601      	adds	r6, #1
 8000ab4:	e7ee      	b.n	8000a94 <__libc_init_array+0xc>
 8000ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aba:	4798      	blx	r3
 8000abc:	3601      	adds	r6, #1
 8000abe:	e7f2      	b.n	8000aa6 <__libc_init_array+0x1e>
 8000ac0:	08000ae8 	.word	0x08000ae8
 8000ac4:	08000ae8 	.word	0x08000ae8
 8000ac8:	08000ae8 	.word	0x08000ae8
 8000acc:	08000aec 	.word	0x08000aec

08000ad0 <_init>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	bf00      	nop
 8000ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad6:	bc08      	pop	{r3}
 8000ad8:	469e      	mov	lr, r3
 8000ada:	4770      	bx	lr

08000adc <_fini>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	bf00      	nop
 8000ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae2:	bc08      	pop	{r3}
 8000ae4:	469e      	mov	lr, r3
 8000ae6:	4770      	bx	lr
